     1                                  ;
     2                                  ;This program will test out the functions library to show the user of number formatted output
     3                                  ;
     4                                  
     5                                  ;
     6                                  ;Include our external functions library functions
     7                                  %include "./functions64.inc"
     1                              <1> ;
     2                              <1> ;Include file for the functions library
     3                              <1> ;
     4                              <1> 
     5                              <1> %macro  PUSHREGS 0
     6                              <1>         push	rax
     7                              <1>         push	rbx
     8                              <1>         push	rcx
     9                              <1>         push	rdx
    10                              <1> 		push	rsi
    11                              <1> 		push	rdi
    12                              <1> 		push	r8
    13                              <1> 		push	r9
    14                              <1> 		push	r10
    15                              <1> 		push	r11
    16                              <1> 		push	r12
    17                              <1> 		push	r13
    18                              <1> 		push	r14
    19                              <1> 		push	r15
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> %macro  POPREGS 0
    23                              <1> 		pop		r15
    24                              <1> 		pop		r14
    25                              <1> 		pop		r13
    26                              <1> 		pop		r12
    27                              <1> 		pop		r11
    28                              <1> 		pop		r10
    29                              <1> 		pop		r9
    30                              <1> 		pop		r8
    31                              <1>         pop		rdi
    32                              <1>         pop		rsi
    33                              <1>         pop		rdx
    34                              <1>         pop		rcx
    35                              <1> 		pop		rbx
    36                              <1> 		pop		rax
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> ;Swap one String with another
    40                              <1> ;Stack contents:
    41                              <1> ;	Address of destination string
    42                              <1> ;	Address of source string
    43                              <1> ;Example Usage:
    44                              <1> ;	push	string1Address
    45                              <1> ;	push	string2Address
    46                              <1> ;	push	length
    47                              <1> ;	call	StringSwap
    48                              <1> ;
    49                              <1> extern		StringSwap
    50                              <1> 
    51                              <1> ;Compare one String with another
    52                              <1> ;	If source is less than destination, rax = -1
    53                              <1> ;	If source is greater than destination, rax = 1
    54                              <1> ;	If source is equal to destination, rax = 0
    55                              <1> ;Stack contents:
    56                              <1> ;	Address of destination string
    57                              <1> ;	Address of source string
    58                              <1> ;Example Usage:
    59                              <1> ;	push	string1Address
    60                              <1> ;	push	string2Address
    61                              <1> ;	call	StringCompare
    62                              <1> ;
    63                              <1> extern		StringCompare
    64                              <1> 
    65                              <1> ;Copy one String to another
    66                              <1> ;Stack contents:
    67                              <1> ;	Address of destination string
    68                              <1> ;	Address of source string
    69                              <1> ;Example Usage:
    70                              <1> ;	push	string1Address
    71                              <1> ;	push	string2Address
    72                              <1> ;	call	StringCopy
    73                              <1> ;
    74                              <1> extern		StringCopy
    75                              <1> 
    76                              <1> ;Print the data for a current function/procedure's stack frame
    77                              <1> ;Notes:
    78                              <1> ;	This function assumes you have created a valid stack frame
    79                              <1> ;	Call this function after the stack frame is created an all
    80                              <1> ;	local function variables have been allocated and before you use
    81                              <1> ;	the stack for any other purposes
    82                              <1> ;Stack contents:
    83                              <1> ;	None
    84                              <1> ;Example Usage:
    85                              <1> ;	call	PrintStackFrame
    86                              <1> ;
    87                              <1> extern		PrintStackFrame
    88                              <1> 
    89                              <1> ;Print a tab character to stdout
    90                              <1> ;Stack contents:
    91                              <1> ;	None
    92                              <1> ;Example Usage:
    93                              <1> ;	call	PrintTab
    94                              <1> ;
    95                              <1> extern		PrintTab
    96                              <1> 
    97                              <1> ;Print all Quad Word values found in an array
    98                              <1> ;Stack Contents:	
    99                              <1> ;	Address of the Array (Stack)
   100                              <1> ;	Number of items in the array
   101                              <1> ;Example Usage:
   102                              <1> ;	push	ArrayToPrint
   103                              <1> ;	push	NumerOfEntriesInArray
   104                              <1> ;	call	PrintQWordArray
   105                              <1> extern		PrintQWordArray
   106                              <1> 
   107                              <1> ;Print all Quad Word values found in an array in Decimal Format
   108                              <1> ;Stack Contents:	
   109                              <1> ;	Address of the Array (Stack)
   110                              <1> ;	Number of items in the array
   111                              <1> ;Example Usage:
   112                              <1> ;	push	ArrayToPrint
   113                              <1> ;	push	NumerOfEntriesInArray
   114                              <1> ;	call	PrintQWordArrayDec
   115                              <1> extern		PrintQWordArrayDec
   116                              <1> 
   117                              <1> ;Print all Quad Word signed values found in an array in Decimal Format
   118                              <1> ;Stack Contents:	
   119                              <1> ;	Address of the Array
   120                              <1> ;	Number of items in the array
   121                              <1> ;Example Usage:
   122                              <1> ;	push	ArrayToPrint
   123                              <1> ;	push	NumerOfEntriesInArray
   124                              <1> ;	call	PrintSQWordArrayDec
   125                              <1> extern		PrintSQWordArrayDec
   126                              <1> 
   127                              <1> ;Print all byte values found in an array in Hex format
   128                              <1> ;Stack Contents:	
   129                              <1> ;	Address of the Array
   130                              <1> ;	Number of items in the array
   131                              <1> ;Example Usage:
   132                              <1> ;	push	ArrayToPrint
   133                              <1> ;	push	NumerOfEntriesInArray
   134                              <1> ;	call	PrintByteArray
   135                              <1> extern		PrintByteArray
   136                              <1> 
   137                              <1> ;Print all byte values found in an array in Decimal format
   138                              <1> ;Stack Contents:	
   139                              <1> ;	Address of the Array
   140                              <1> ;	Number of items in the array
   141                              <1> ;Example Usage:
   142                              <1> ;	push	ArrayToPrint
   143                              <1> ;	push	NumerOfEntriesInArray
   144                              <1> ;	call	PrintByteArrayDec
   145                              <1> extern		PrintByteArrayDec
   146                              <1> 
   147                              <1> ;Print all signed byte values found in an array in Decimal format
   148                              <1> ;Stack Contents:	
   149                              <1> ;	Address of the Array
   150                              <1> ;	Number of items in the array
   151                              <1> ;Example Usage:
   152                              <1> ;	push	ArrayToPrint
   153                              <1> ;	push	NumerOfEntriesInArray
   154                              <1> ;	call	PrintSByteArrayDec
   155                              <1> extern		PrintSByteArrayDec
   156                              <1> 
   157                              <1> ;Print all word values found in an array in Hex format
   158                              <1> ;Stack Contents:	
   159                              <1> ;	Address of the Array
   160                              <1> ;	Number of items in the array
   161                              <1> ;Example Usage:
   162                              <1> ;	push	ArrayToPrint
   163                              <1> ;	push	NumerOfEntriesInArray
   164                              <1> ;	call	PrintWordArray
   165                              <1> extern		PrintWordArray
   166                              <1> 
   167                              <1> ;Print all word values found in an array in Decimal format
   168                              <1> ;Stack Contents:	
   169                              <1> ;	Address of the Array
   170                              <1> ;	Number of items in the array
   171                              <1> ;Example Usage:
   172                              <1> ;	push	ArrayToPrint
   173                              <1> ;	push	NumerOfEntriesInArray
   174                              <1> ;	call	PrintWordArrayDec
   175                              <1> extern		PrintWordArrayDec
   176                              <1> 
   177                              <1> ;Print all signed word values found in an array in Decimal format
   178                              <1> ;Stack Contents:	
   179                              <1> ;	Address of the Array
   180                              <1> ;	Number of items in the array
   181                              <1> ;Example Usage:
   182                              <1> ;	push	ArrayToPrint
   183                              <1> ;	push	NumerOfEntriesInArray
   184                              <1> ;	call	PrintSWordArrayDec
   185                              <1> extern		PrintSWordArrayDec
   186                              <1> 
   187                              <1> ;Print all Double Word values found in an array in Hex format
   188                              <1> ;Stack Contents:	
   189                              <1> ;	Address of the Array
   190                              <1> ;	Number of items in the array
   191                              <1> ;Example Usage:
   192                              <1> ;	push	ArrayToPrint
   193                              <1> ;	push	NumerOfEntriesInArray
   194                              <1> ;	call	PrintDWordArray
   195                              <1> extern		PrintDWordArray
   196                              <1> 
   197                              <1> ;Print all Double Word values found in an array in Decimal format
   198                              <1> ;Stack Contents:	
   199                              <1> ;	Address of the Array
   200                              <1> ;	Number of items in the array
   201                              <1> ;Example Usage:
   202                              <1> ;	push	ArrayToPrint
   203                              <1> ;	push	NumerOfEntriesInArray
   204                              <1> ;	call	PrintDWordArrayDec
   205                              <1> extern		PrintDWordArrayDec
   206                              <1> 
   207                              <1> ;Print all signed Double Word values found in an array in Decimal format
   208                              <1> ;Stack Contents:	
   209                              <1> ;	Address of the Array (Stack)
   210                              <1> ;	Number of items in the array
   211                              <1> ;Example Usage:
   212                              <1> ;	push	ArrayToPrint
   213                              <1> ;	push	NumerOfEntriesInArray
   214                              <1> ;	call	PrintSDWordArrayDec
   215                              <1> extern		PrintSDWordArrayDec
   216                              <1> 
   217                              <1> ;Print a string with an ending 00h delimiter to the console
   218                              <1> ;Stack Contents:
   219                              <1> ;	Address of the String (Stack)
   220                              <1> ;Example Usage:
   221                              <1> ;	push	stringVariable
   222                              <1> ;	call	PrintString
   223                              <1> extern		PrintString
   224                              <1> 
   225                              <1> ;Get the length of a null-terminated string.  Can be used for functions
   226                              <1> ;which need a string length and don't search for null-terminated characters
   227                              <1> ;Stack Contents:
   228                              <1> ;	Address of the String (Stack)
   229                              <1> ;Return Value:
   230                              <1> ;	RAX will equal the length of the string
   231                              <1> ;Example Usage:
   232                              <1> ;	push	stringVariable
   233                              <1> ;	call	StringLength
   234                              <1> extern		StringLength
   235                              <1> 
   236                              <1> ;Print a space to the console
   237                              <1> ;Stack Contents:
   238                              <1> ;	None
   239                              <1> ;Example Usage:
   240                              <1> ;	call	PrintSpace
   241                              <1> extern		PrintSpace
   242                              <1> 
   243                              <1> ;Print 'x' number of spaces
   244                              <1> ;Stack Contents:
   245                              <1> ;	the total spaces to print
   246                              <1> ;Example Usage:
   247                              <1> ;	push	DWORD 5
   248                              <1> ;	call	PrintSpaces
   249                              <1> extern		PrintSpaces
   250                              <1> 
   251                              <1> ;Print a comma to the console
   252                              <1> ;Stack Contents:
   253                              <1> ;	None
   254                              <1> ;Example Usage:
   255                              <1> ;	call	PrintComma
   256                              <1> extern		PrintComma
   257                              <1> 
   258                              <1> ;Print a new line to the console
   259                              <1> ;Stack Contents:
   260                              <1> ;	None
   261                              <1> ;Example Usage:
   262                              <1> ;	call	Printendl
   263                              <1> extern		Printendl
   264                              <1> 
   265                              <1> ;Print a string which is not null terminated
   266                              <1> ;Stack contents:
   267                              <1> ;	The Address of the string to print
   268                              <1> ;	The length of the string to print
   269                              <1> ;Example Usage:
   270                              <1> ;	push	stringVariable
   271                              <1> ;	push	stringVariable.len
   272                              <1> ;	call	PrintText
   273                              <1> extern		PrintText
   274                              <1> 
   275                              <1> ;Convert and then print a 64bit hex number
   276                              <1> ;Stack contents:
   277                              <1> ;	Value to Convert to an Ascii String
   278                              <1> ;Example Usage:
   279                              <1> ;	push	QWORD [quadWordVariable]
   280                              <1> ;	call	Print64bitNumHex
   281                              <1> extern		Print64bitNumHex
   282                              <1>    
   283                              <1> ;Convert and then print a 64bit octal number
   284                              <1> ;Stack contents:
   285                              <1> ;	Value to Convert to an Ascii String
   286                              <1> ;Example Usage:
   287                              <1> ;	push	QWORD [quadWordVariable]
   288                              <1> ;	call	Print64bitNumOctal
   289                              <1> extern		Print64bitNumOctal
   290                              <1> 
   291                              <1> ;Convert and then print a 64bit decimal number
   292                              <1> ;Stack contents:
   293                              <1> ;	Value to Convert to an Ascii String
   294                              <1> ;Example Usage:
   295                              <1> ;	push QWORD [quadwordvariable]
   296                              <1> ;	call	Print64bitNumDecimal
   297                              <1> extern		Print64bitNumDecimal
   298                              <1> 
   299                              <1> ;Convert and then print a signed 64bit decimal number
   300                              <1> ;Stack contents:
   301                              <1> ;	Value to Convert to an Ascii String
   302                              <1> ;Example Usage:
   303                              <1> ;	push QWORD [quadwordvariable]
   304                              <1> ;	call	Print64bitNumDecimal
   305                              <1> extern		Print64bitSNumDecimal
   306                              <1> 
   307                              <1> ;Convert and then print a 64bit binary number
   308                              <1> ;Stack contents:
   309                              <1> ;	Value to Convert to an Ascii String
   310                              <1> ;Example Usage:
   311                              <1> ;	push QWORD [quadwordvariable]
   312                              <1> ;	call	Print64bitNumBinary
   313                              <1> extern		Print64bitNumBinary
   314                              <1> 
   315                              <1> ;Print a full 64bit binary number including leading zeros
   316                              <1> ;Stack contents:
   317                              <1> ;	Value to Convert to an Ascii String
   318                              <1> ;Example Usage:
   319                              <1> ;	push QWORD [quadwordvariable]
   320                              <1> ;	call	Print64bitFullBinary
   321                              <1> extern		Print64bitFullBinary
   322                              <1> 
   323                              <1> ;This routine prints a string to the screen left justified
   324                              <1> ;Stack contents:
   325                              <1> ;	Address of the string [ebp + 16]
   326                              <1> ;	Number of characters it will be justified within [ebp + 24]
   327                              <1> ;Example Usage:
   328                              <1> ;	push	stringVariable
   329                              <1> ;	push	QWORD 80
   330                              <1> ;	call	PrintLeft
   331                              <1> extern		PrintLeft
   332                              <1> 
   333                              <1> ;This routine prints a string to the screen right justified
   334                              <1> ;Stack contents:
   335                              <1> ;	Address of the string [ebp + 16]
   336                              <1> ;	Number of characters it will be justified within [ebp + 24]
   337                              <1> ;Example Usage:
   338                              <1> ;	push	stringVariable
   339                              <1> ;	push	QWORD 80
   340                              <1> ;	call	PrintRight
   341                              <1> extern		PrintRight
   342                              <1> 
   343                              <1> ;This routine prints a string to the screen center justified
   344                              <1> ;Stack contents:
   345                              <1> ;	Address of the string [ebp + 16]
   346                              <1> ;	Number of characters it will be justified within [ebp + 24]
   347                              <1> ;Example Usage:
   348                              <1> ;	push	stringVariable
   349                              <1> ;	push	QWORD 80
   350                              <1> ;	call	PrintCenter
   351                              <1> extern		PrintCenter
   352                              <1> 
   353                              <1> ;Print all 64bit Registers to the screen
   354                              <1> ;Stack contents:
   355                              <1> ;	None
   356                              <1> ;Example Usage:
   357                              <1> ;	call	PrintRegisters
   358                              <1> extern		PrintRegisters
   359                              <1> 
   360                              <1> ;Call the necessary interrupt with the necessary register values to read data from the keyboard
   361                              <1> ;Stack Contents:
   362                              <1> ;	Address of keyboard buffer
   363                              <1> ;	Size of the keyboard buffer
   364                              <1> ;Return:
   365                              <1> ;	Rax will contain the number of characters the user input
   366                              <1> ;Example Usage:
   367                              <1> ;	push	readbuffer
   368                              <1> ;	push	readbuffer.len
   369                              <1> ;	call	ReadText
   370                              <1> extern		ReadText
   371                              <1> 
   372                              <1> ;Input UnSigned Int 
   373                              <1> ;This function will let the user input an integer returned into the RAX register
   374                              <1> ;Arguments: None
   375                              <1> ;Return: 	rax will contain the usigned ingeter
   376                              <1> ;			Carry flag will be set if invalid integer was input
   377                              <1> ;Example Usage:
   378                              <1> ;	call	InputInt
   379                              <1> ;	Note: eax will contain the value of the unsigned integer entered
   380                              <1> ;	jnc		validIntegerInput
   381                              <1> ;	Otherwise, an invalid integer was input
   382                              <1> extern		InputUInt
   383                              <1> 
   384                              <1> ;Input Signed Int 
   385                              <1> ;This function will let the user input a signed integer and put the value 
   386                              <1> ;into the RAX register.
   387                              <1> ;Arguments: None
   388                              <1> ;Return: 	eax will contain the usigned ingeter
   389                              <1> ;			Carry flag will be set if invalid integer was input
   390                              <1> ;Example Usage:
   391                              <1> ;	call	InputSInt
   392                              <1> ;	Note: eax will contain the value of the signed integer entered
   393                              <1> ;	jnc		validIntegerInput
   394                              <1> ;	Otherwise, an invalid integer was input
   395                              <1> extern		InputSInt
   396                              <1> 
   397                              <1> ;Call the necessary interrupt with the necessary register values to read data from the keyboard
   398                              <1> ;Stack Contents:
   399                              <1> ;	Address of the string to print
   400                              <1> ;	Address of keyboard buffer
   401                              <1> ;	Size of the keyboard buffer
   402                              <1> ;Return:
   403                              <1> ;	Rax will contain the number of characters input
   404                              <1> ;Example Usage:
   405                              <1> ;	push	inputPromptVariable
   406                              <1> ;	push	keyboardBufferVariable
   407                              <1> ;	push	keyboardBufferVariable.len  ;This is the maximum size of the buffer
   408                              <1> ;	call	ReadTextWPrompt
   409                              <1> extern		ReadTextWPrompt
   410                              <1> 
   411                              <1> ;Print a Quad-word floating point number
   412                              <1> ;Stack Contents:
   413                              <1> ;	The number of fractional digits to print
   414                              <1> ;	The floating point number to print
   415                              <1> ;Return:
   416                              <1> ;	None
   417                              <1> ;Example Usage:
   418                              <1> ;	push	numberToPrint
   419                              <1> ;	push	[fractionalDigits]
   420                              <1> ;	call	PrintQWFloat
   421                              <1> extern		PrintQWFloat
   422                              <1> 
   423                              <1> ;Print a Double-word floating point number with scientific notation
   424                              <1> ;This version uses the integer extraction power of the FPU instead of moving bits
   425                              <1> ;	around to extract the exponent and left/right mantissa's making this a
   426                              <1> ;	much easier and shorter algorithm
   427                              <1> ;Stack Contents:
   428                              <1> ;	The number of fractional digits to print
   429                              <1> ;	The floating point number to print
   430                              <1> ;Return:
   431                              <1> ;	None
   432                              <1> ;Example Usage:
   433                              <1> ;	push	[numberToPrint]
   434                              <1> ;	push	[fractionalDigits]
   435                              <1> ;	call	PrintQWFloatSN
   436                              <1> extern		PrintQWFloatSN
   437                              <1> 
   438                              <1> ;Input a Floating Point Number	
   439                              <1> ;This function will let the user input a string, then it will check it to make sure it
   440                              <1> ;is a valid floating point number.  It will then convert the ASCII string into a QWORD 
   441                              <1> ;and return that value in the RAX register.
   442                              <1> ;Stack Contents:
   443                              <1> ;	None
   444                              <1> ;Return: 	RAX and ST(0) will contain the number
   445                              <1> ;			Carry flag will be set if invalid binary number was input
   446                              <1> ;Example Usage:
   447                              <1> ;	call	InputFloat
   448                              <1> ;	jnc		ValidFloatLabel
   449                              <1> ;	otherwise, a problem occured - print an error message
   450                              <1> extern		InputFloat
   451                              <1> 	
   452                              <1> ;Input Binary Number
   453                              <1> ;This function will let the user input a string, then it will check it to make sure it
   454                              <1> ;is a binary string.  It will then convert the ASCII string into a DWORD and return
   455                              <1> ;that value in the RAX register.
   456                              <1> ;Stack Contents:
   457                              <1> ;	None
   458                              <1> ;Return: 	rax will contain the numeric binary value
   459                              <1> ;			Carry flag will be set if invalid binary number was input
   460                              <1> ;Example Usage:
   461                              <1> ;	call	InputBin
   462                              <1> ;	jnc		ValidBinLabel
   463                              <1> ;	otherwise, a problem occured - print an error message
   464                              <1> extern		InputBin
   465                              <1> 
   466                              <1> ;This function will let the user input a string, then it will check it to make sure it
   467                              <1> ;is a hexidecimal string.  It will then convert the ASCII string into a DWORD and return
   468                              <1> ;that value in the EAX register.
   469                              <1> ;Stack Contents:
   470                              <1> ;	None
   471                              <1> ;Return: 	rax will contain the numeric hexidecimal value
   472                              <1> ;			Carry flag will be set if invalid hex number was input
   473                              <1> ;Example Usage:
   474                              <1> ;	call	InputHex
   475                              <1> ;	jnc		ValidHexLabel
   476                              <1> ;	otherwise, a problem occured - print an error message
   477                              <1> extern		InputHex
   478                              <1> 
   479                              <1> ;Allocate some memory (x bytes)	and return the high address to RAX
   480                              <1> ;Stack Contents:
   481                              <1> ;	Number of BYTES to add to memory
   482                              <1> ;Return: 	RAX will contain the new high memory address
   483                              <1> ;Example Usage:
   484                              <1> ;	push	QWORD 1024			;increase memory by 1024 bytes
   485                              <1> ;	call	AllocateBytes
   486                              <1> extern		AllocateBytes
   487                              <1> 
   488                              <1> ;Free some memory (x bytes)	and return the high address to RAX
   489                              <1> ;Stack Contents:
   490                              <1> ;	Number of BYTES to remove from memory
   491                              <1> ;Return: 	RAX will contain the new high memory address
   492                              <1> ;Example Usage:
   493                              <1> ;	push	QWORD 1024			;reduce memory by 1024 bytes
   494                              <1> ;	call	FreeBytes
   495                              <1> extern		FreeBytes
   496                              <1> 
   497                              <1> ;Print all of the floating point registers ST0 - ST7
   498                              <1> ;Stack Contents:
   499                              <1> ;	None
   500                              <1> ;Return: 	None
   501                              <1> ;Example Usage:
   502                              <1> ;	call	PrintFloatingRegisters
   503                              <1> extern		PrintFloatingRegisters
   504                              <1> 
   505                              <1> ;Print a 64-bit floating point number
   506                              <1> ;Stack Contents:
   507                              <1> ;	The floating point number
   508                              <1> ;Return: 	None
   509                              <1> ;Example Usage:
   510                              <1> ;	call	Print64bitFloatBinary
   511                              <1> extern		Print64bitFloatBinary
   512                              <1> 
   513                              <1> ;Set the carry flag if the floating poing number pushed onto the Stack
   514                              <1> ;is a +NAN, -NAN, +Infinity or -Infinity
   515                              <1> ;Stack Contents:
   516                              <1> ;	QWORD Floating Point number (Stack)
   517                              <1> ;Return: Carry Flag Set if NAN, Clear if OK
   518                              <1> ;Example Usage
   519                              <1> ;   push  QWORD [floatingVariable]
   520                              <1> ;   call  IsNAN
   521                              <1> extern		IsNAN
   522                              <1> 
   523                              <1> ;Simple xor encryption/decryption of a string using a user entered key
   524                              <1> ;Stack Contents:
   525                              <1> ;	String address to encrypt/decrypt (Stack rbp + 48)
   526                              <1> ;	Length of the string to encrypt (Stack rbp + 40)
   527                              <1> ;	string address to be used as a key (Stack rbp + 32)
   528                              <1> ;	integer value indicating the length of the key (Stack rbp + 24)
   529                              <1> ;	string address where the encrypted/decrypted data should go (Stack rbp + 16)
   530                              <1> ;Return:	Total bytes encrypted in eax
   531                              <1> ;Example Usage
   532                              <1> ;   push	stringaddress
   533                              <1> ;	push	lengthofstring
   534                              <1> ;	push	keystringaddress
   535                              <1> ;	push	lengthofkey
   536                              <1> ;	push	resultaddress
   537                              <1> ;   call  EncryptString
   538                              <1> extern		EncryptString
   539                              <1> 
   540                              <1> ;Clears the keyboard buffer until \n or null are encountered
   541                              <1> ;Stack contents:
   542                              <1> ;	None
   543                              <1> ;Example Usage:
   544                              <1> ;	call	ClearKBuffer
   545                              <1> extern		ClearKBuffer
   546                              <1> 
   547                              <1> ;An Internal function used to get the system time in hours
   548                              <1> ;Stack Contents:
   549                              <1> ;	None
   550                              <1> ;Return: RAX will have the current Hour
   551                              <1> ;Example Usage
   552                              <1> ;	call	GetCurrentHour
   553                              <1> extern		GetCurrentHour
   554                              <1> 
   555                              <1> ;An Internal function used to get the system time in minutes
   556                              <1> ;Stack Contents:
   557                              <1> ;	None
   558                              <1> ;Return: RAX will have the current minute
   559                              <1> ;Example Usage
   560                              <1> ;	call	GetCurrentMinute
   561                              <1> extern		GetCurrentMinute
   562                              <1> 
   563                              <1> ;An Internal function used to get the system time in seconds
   564                              <1> ;Stack Contents:
   565                              <1> ;	None
   566                              <1> ;Return: RAX will have the current seconds
   567                              <1> ;Example Usage
   568                              <1> ;	call	GetCurrentSecond
   569                              <1> extern		GetCurrentSecond
   570                              <1> 
   571                              <1> ;An Internal function used to get the system year
   572                              <1> ;Stack Contents:
   573                              <1> ;	None
   574                              <1> ;Return: RAX will have the current year
   575                              <1> ;Example Usage
   576                              <1> ;	call	GetCurrentYear
   577                              <1> extern		GetCurrentYear
   578                              <1> 
   579                              <1> ;An Internal function used to get the system month
   580                              <1> ;Stack Contents:
   581                              <1> ;	None
   582                              <1> ;Return: RAX will have the current month
   583                              <1> ;Example Usage
   584                              <1> ;	call	GetCurrentMonth
   585                              <1> extern		GetCurrentMonth
   586                              <1> 
   587                              <1> ;An Internal function used to get the system day
   588                              <1> ;Stack Contents:
   589                              <1> ;	None
   590                              <1> ;Return: RAX will have the current day
   591                              <1> ;Example Usage
   592                              <1> ;	call	GetCurrentDay
   593                              <1> extern		GetCurrentDay
   594                              <1> 
   595                              <1> ;An Internal function used to get the system time hours, minutes, seconds
   596                              <1> ;Stack Contents:
   597                              <1> ;	None
   598                              <1> ;Return: None
   599                              <1> ;Example Usage
   600                              <1> ;   call GetSystemTime
   601                              <1> extern		GetSystemTime
   602                              <1> 
   603                              <1> ;Print the time in the format hh:mm:ss
   604                              <1> ;Stack Contents:
   605                              <1> ;	None
   606                              <1> ;Return: None
   607                              <1> ;Example Usage
   608                              <1> ;   call PrintSystemTime
   609                              <1> extern		PrintSystemTime
   610                              <1> 
   611                              <1> ;Print the date in the format mm/dd/yyyy
   612                              <1> ;Stack Contents:
   613                              <1> ;	None
   614                              <1> ;Return: None
   615                              <1> ;Example Usage
   616                              <1> ;   call PrintSystemDateEng
   617                              <1> extern		PrintSystemDateEng
   618                              <1> 
   619                              <1> ;Print the date in the format yyyy/mm/dd
   620                              <1> ;Stack Contents:
   621                              <1> ;	None
   622                              <1> ;Return: None
   623                              <1> ;Example Usage
   624                              <1> ;   call PrintSystemDateEuro
   625                              <1> extern		PrintSystemDateEuro
   626                              <1> 
   627                              <1> ;Convert and then return in a byte array a64-but number in decimal format
   628                              <1> ;Stack contents:
   629                              <1> ;	Value to Convert to an Ascii String
   630                              <1> ;	Address of byte array to contain the result
   631                              <1> ;Return Value:
   632                              <1> ;	rax = Number of characters returned
   633                              <1> ;Example Usage:
   634                              <1> ;	push 	QWORD [quadwordvariable]
   635                              <1> ;	push 	stringbuffer
   636                              <1> ;	call	ToString64bitNumDecimal
   637                              <1> extern		ToString64bitNumDecimal
   638                              <1> 
   639                              <1> ;Convert and then return in a byte array a 64bit signed number in decimal format
   640                              <1> ;Stack contents:
   641                              <1> ;	Value to Convert to an Ascii String
   642                              <1> ;	Address of byte array to contain the result
   643                              <1> ;Return Value:
   644                              <1> ;	rax = Number of characters returned
   645                              <1> ;Example Usage:
   646                              <1> ;	push 	QWORD [quadwordvariable]
   647                              <1> ;	push 	stringbuffer
   648                              <1> ;	call	ToString64bitSNumDecimal
   649                              <1> extern		ToString64bitSNumDecimal
   650                              <1> 
   651                              <1> ;Get the system date in English format and return to the calling function in th array
   652                              <1> ;	provided
   653                              <1> ;Stack contents:
   654                              <1> ;	Address of byte array to contain the result
   655                              <1> ;Return Value:
   656                              <1> ;	rax = Number of characters returned
   657                              <1> ;Example Usage:
   658                              <1> ;	push 	stringbuffer
   659                              <1> ;	call	GetEngDateString
   660                              <1> extern		GetEngDateString
   661                              <1> 
   662                              <1> ;Get the system date in European format and return to the calling function in th array
   663                              <1> ;	provided
   664                              <1> ;Stack contents:
   665                              <1> ;	Address of byte array to contain the result
   666                              <1> ;Return Value:
   667                              <1> ;	rax = Number of characters returned
   668                              <1> ;Example Usage:
   669                              <1> ;	push 	stringbuffer
   670                              <1> ;	call	GetEuroDateString
   671                              <1> extern		GetEuroDateString
   672                              <1> 
   673                              <1> ;Get the system time and return to the calling function in th array
   674                              <1> ;	provided
   675                              <1> ;Stack contents:
   676                              <1> ;	Address of byte array to contain the result
   677                              <1> ;Return Value:
   678                              <1> ;	rax = Number of characters returned
   679                              <1> ;Example Usage:
   680                              <1> ;	push 	stringbuffer
   681                              <1> ;	call	GetTimeString
   682                              <1> extern		GetTimeString
   683                              <1> 
   684                              <1> 
   685                              <1> ;Get a random number from the CPU
   686                              <1> ;Stack contents:
   687                              <1> ;	The maximum value of the random number
   688                              <1> ;	Signed = 1, Unsigned = 0
   689                              <1> ;Return Value:
   690                              <1> ;	rax = Random number value
   691                              <1> ;Example Usage:
   692                              <1> ;	push 	QWORD 200			;Will create a random number no greater than 200
   693                              <1> ;	push	QWORD 1				;1 = signed, 0 = uinsigned
   694                              <1> ;	call	GetRandomInt
   695                              <1> extern		GetRandomInt
   696                              <1> 
   697                              <1> ;Calculate the Variance from an array of numbers returning an integer result
   698                              <1> ;Stack contents:
   699                              <1> ;	Address of sample array of Quad words
   700                              <1> ;	The number of samples to process
   701                              <1> ;Return Value:
   702                              <1> ;	rax = Calculated Variance
   703                              <1> ;Example Usage:
   704                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   705                              <1> ;	push	10					;process 10 of the numbers in the array
   706                              <1> ;	call	CalcVariance
   707                              <1> extern		CalcVariance
   708                              <1> 
   709                              <1> 
   710                              <1> ;Calculate the Variance from an array of numbers returning a floating point number
   711                              <1> ;Stack contents:
   712                              <1> ;	Address of sample array of Quad words
   713                              <1> ;	The number of samples to process
   714                              <1> ;Return Value:
   715                              <1> ;	rax = Calculated Variance
   716                              <1> ;Example Usage:
   717                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   718                              <1> ;	push	10					;process 10 of the numbers in the array
   719                              <1> ;	call	CalcVariance
   720                              <1> extern		CalcVarianceFloat
   721                              <1> 
   722                              <1> ;Calculate the Standard Deviation from an array of numbers
   723                              <1> ;Stack contents:
   724                              <1> ;	Address of sample array of Quad words
   725                              <1> ;	The number of samples to process
   726                              <1> ;Return Value:
   727                              <1> ;	rax = Calculated Standard Deviation
   728                              <1> ;Example Usage:
   729                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   730                              <1> ;	push	10					;process 10 of the numbers in the array
   731                              <1> ;	call	CalcStdDev
   732                              <1> extern		CalcStdDev
   733                              <1> 
   734                              <1> ;Calculate the Mean from an array of numbers
   735                              <1> ;Stack contents:
   736                              <1> ;	Address of sample array of Quad words
   737                              <1> ;	The number of samples to process
   738                              <1> ;Return Value:
   739                              <1> ;	rax = Calculated Mean
   740                              <1> ;Example Usage:
   741                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   742                              <1> ;	push	10					;process 10 of the numbers in the array
   743                              <1> ;	call	CalcMean
   744                              <1> extern		CalcMean
   745                              <1> 
   746                              <1> ;Fills an array with random quad values
   747                              <1> ;Stack contents:
   748                              <1> ;	Address of array of Quad words
   749                              <1> ;	The number of samples to process
   750                              <1> ;	Maximum value of the random number(s)
   751                              <1> ;	Signed = 1, Unsigned = 0
   752                              <1> ;Return Value:
   753                              <1> ;	Nothing
   754                              <1> ;Example Usage:
   755                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   756                              <1> ;	push	10					;process 10 of the numbers in the array
   757                              <1> ;	push	500					;The maximum random value should be 500
   758                              <1> ;	push	0					;Unsigned only
   759                              <1> ;	call	RandomArray
   760                              <1> extern		RandomArray
   761                              <1> 
   762                              <1> ;Calculate the sum from an array of numbers
   763                              <1> ;Stack contents:
   764                              <1> ;	Address of sample array of Quad words
   765                              <1> ;	The number of samples to process
   766                              <1> ;Return Value:
   767                              <1> ;	rax = Calculated Sum
   768                              <1> ;Example Usage:
   769                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   770                              <1> ;	push	10					;process 10 of the numbers in the array
   771                              <1> ;	call	CalcSumArray
   772                              <1> extern		CalcSumArray
   773                              <1> 
   774                              <1> ;Calculate the GCD of two numbers passed to this function
   775                              <1> ;Stack contents:
   776                              <1> ;	Integer #1
   777                              <1> ;	Integer #2
   778                              <1> ;Return Value:
   779                              <1> ;	rax = Calculated Greatest Common Denominator
   780                              <1> ;Example Usage:
   781                              <1> ;	push 	15					;Our first number
   782                              <1> ;	push	5					;Our second number
   783                              <1> ;	call	CalcGCD
   784                              <1> extern		CalcGCD
   785                              <1> 
   786                              <1> ;Calculate the factorial of a number passed to this function
   787                              <1> ;Stack contents:
   788                              <1> ;	Integer number to factor
   789                              <1> ;Return Value:
   790                              <1> ;	rax = Calculated Factorial of the argument passed in
   791                              <1> ;Example Usage:
   792                              <1> ;	push 	15				;The number fo factor - 15 in this case
   793                              <1> ;	call	CalcFactorial
   794                              <1> extern		CalcFactorial
   795                              <1> 
   796                              <1> ;Calculate the factorial of a number passed to this function
   797                              <1> ;Stack contents:
   798                              <1> ;	Integer number to factor
   799                              <1> ;Return Value:
   800                              <1> ;	rax = Calculated Factorial of the argument passed in floating point format
   801                              <1> ;Example Usage:
   802                              <1> ;	push 	15				;The number fo factor - 15 in this case
   803                              <1> ;	call	CalcFactorialFloat
   804                              <1> extern		CalcFactorialFloat
   805                              <1> 
     8                                  
     9                                  SECTION .data
    10 00000000 57656C636F6D652074-     	openPrompt		db	"Welcome to my Program", 0dh, 0ah, 0h
    10 00000009 6F206D792050726F67-
    10 00000012 72616D0D0A00       
    11                                  		.LENGTHOF	equ		($ - openPrompt)
    12 00000018 50726F6772616D2065-     	closePrompt		db	"Program ending, have a nice day", 0dh, 0ah, 0h
    12 00000021 6E64696E672C206861-
    12 0000002A 76652061206E696365-
    12 00000033 206461790D0A00     
    13                                  		.LENGTHOF	equ		($ - closePrompt)
    14 0000003A 0D0A2A2A2A4572726F-     	errorPrompt		db	0dh, 0ah, "***Error: Either there's not enough arguments or you entered",
    14 00000043 723A20456974686572-
    14 0000004C 207468657265277320-
    14 00000055 6E6F7420656E6F7567-
    14 0000005E 6820617267756D656E-
    14 00000067 7473206F7220796F75-
    14 00000070 20656E7465726564   
    15 00000078 206D6F726520746861-     					db	" more than two arguments. Please only enter two arguments.", 0dh, 0ah, 0dh, 0ah, 0h
    15 00000081 6E2074776F20617267-
    15 0000008A 756D656E74732E2050-
    15 00000093 6C65617365206F6E6C-
    15 0000009C 7920656E7465722074-
    15 000000A5 776F20617267756D65-
    15 000000AE 6E74732E0D0A0D0A00 
    16                                  		.LENGTHOF	equ		($ - errorPrompt)
    17 000000B7 0D0A2A2A2A4572726F-     	errorPrompt2	db	0dh, 0ah, "***Error: Couldn't open input file.", 0dh, 0ah, 0dh, 0ah, 0h
    17 000000C0 723A20436F756C646E-
    17 000000C9 2774206F70656E2069-
    17 000000D2 6E7075742066696C65-
    17 000000DB 2E0D0A0D0A00       
    18                                  		.LENGTHOF	equ		($ - errorPrompt2)
    19 000000E1 0D0A2A2A2A4572726F-     	errorPrompt3	db	0dh, 0ah, "***Error: Couldn't create output file.", 0dh, 0ah, 0dh, 0ah, 0h
    19 000000EA 723A20436F756C646E-
    19 000000F3 277420637265617465-
    19 000000FC 206F75747075742066-
    19 00000105 696C652E0D0A0D0A00 
    20                                  		.LENGTHOF	equ		($ - errorPrompt3)
    21 0000010E 0D0A54686520736F75-     	copyPrompt		db	0dh, 0ah, "The source file is being copied to the destination file.", 0dh, 0ah, 0h
    21 00000117 7263652066696C6520-
    21 00000120 6973206265696E6720-
    21 00000129 636F7069656420746F-
    21 00000132 207468652064657374-
    21 0000013B 696E6174696F6E2066-
    21 00000144 696C652E0D0A00     
    22                                  		.LENGTHOF	equ		($ - copyPrompt)
    23 0000014B 0D0A506C6561736520-     	keyPrompt		db	0dh, 0ah, "Please enter your encryption/decryption key: ", 0h
    23 00000154 656E74657220796F75-
    23 0000015D 7220656E6372797074-
    23 00000166 696F6E2F6465637279-
    23 0000016F 7074696F6E206B6579-
    23 00000178 3A2000             
    24                                  		.LENGTHOF	equ		($ - keyPrompt)
    25 0000017B 0D0A00                  	nextline		db	0dh, 0ah, 0h
    26                                  		.LENGTHOF	equ		($ - nextline)
    27 0000017E 0D0A546F74616C2062-     	bytesPrompt		db	0dh, 0ah, "Total bytes written: ", 0h
    27 00000187 797465732077726974-
    27 00000190 74656E3A2000       
    28                                  		.LENGTHOF	equ		($ - bytesPrompt)
    29                                  
    30                                  SECTION .bss
    31                                  
    32 00000000 <res 00000008>          	argc				resq	1		;Number of arguments
    33 00000008 <res 00000008>          	sourceFileAddress	resq	1		
    34 00000010 <res 000000FF>          	sourceFile			resb	255		;storage for the source file
    35                                  		.LENGTHOF	equ	($ - sourceFile)
    36 0000010F <res 00000008>          	sourceFileD			resq	1		;Input file descriptor
    37 00000117 <res 00000008>          	destFileAddress		resq	1		
    38 0000011F <res 000000FF>          	destFile			resb	255		;storage for the destination file
    39                                  		.LENGTHOF	equ	($ - destFile)
    40 0000021E <res 00000008>          	destFileD			resq	1		;Destination file descriptor
    41                                  	
    42 00000226 <res 000000FF>          	encryptionKey		resb	0ffh	;Encryption key input buffer
    43                                  		.LENGTHOF	equ	($ - encryptionKey)
    44 00000325 <res 00000008>          	keyLength			resq	1		;Length of the encryption key inputted by the user
    45                                  		
    46 0000032D <res 00000008>          	origMemoryLimit		resq	1		;Pointer to the original bottom of our program
    47 00000335 <res 00000008>          	currentBottom		resq	1		;Pointer to the end of the newly allocated memory
    48 0000033D <res 00000008>          	currentTop			resq	1		;Pointer to the beginning of newly allocated memory
    49                                  	
    50 00000345 <res 00000008>          	bytesRead			resq	1		;Store the number of bytes read
    51 0000034D <res 00000008>          	totalBytesRead		resq	1		;Store the total number of bytes read
    52                                  
    53                                  SECTION     .text
    54                                  	global      _start
    55                                  
    56                                  _start:
    57 00000000 90                      	nop
    58                                  	
    59 00000001 68[00000000]                push	openPrompt
    60 00000006 6A18                        push	openPrompt.LENGTHOF
    61 00000008 E87D020000                  call	outputDisplay
    62                                      
    63 0000000D 58                          pop		rax						;Pop the number of arguments onto RAX
    64 0000000E 4883F803                    cmp		rax,		3			;If the number of arguments is equal to 3
    65 00000012 7411                        je		continue1				;then move on
    66 00000014 68[3A000000]                push	errorPrompt				;Otherwise display an error message and exit the program
    67 00000019 6A7D                        push	errorPrompt.LENGTHOF
    68 0000001B E86A020000                  call	outputDisplay
    69 00000020 E927020000                  jmp		exit1
    70                                      
    71                                      continue1:
    72 00000025 48890425[00000000]          mov		[argc],		rax				;Store the number of arguments into argc
    73 0000002D 5E                          pop		rsi							;Pop the memory address of the program path
    74 0000002E 5E                          pop		rsi							;Pop the memory address of the first argument into RSI
    75 0000002F 48893425[08000000]          mov		[sourceFileAddress],	rsi	;Copy the address of the first argument into sourceFileAddress
    76 00000037 5E                          pop		rsi							;Pop the memory address of the second argument into RSI
    77 00000038 48893425[17010000]          mov		[destFileAddress],	rsi		;Copy the address of the second argument into destFileAddress
    78                                      
    79                                      ;Open the input file
    80 00000040 B802000000                  mov		rax,	2						;Open file open the file
    81 00000045 488B3C25[08000000]          mov		rdi,	QWORD[sourceFileAddress];Copy the pointer to the file name string
    82 0000004D BE00000000                  mov		rsi,	0h						;File security flags, set to zero when opening a file
    83 00000052 BA00000000                  mov		rdx,	0h						;File access flags, 0 for read
    84 00000057 0F05                        syscall									;Poke the kernel
    85 00000059 4883F800                    cmp		rax,	0						;Check to be sure the file opened OK
    86 0000005D 7E0A                        jle		error							;If it's negative or zero, file open failed    
    87 0000005F 48890425[0F010000]          mov		[sourceFileD],	rax				;Save the file pointer/handle
    88 00000067 EB11                        jmp		continue3						;Skip the error message if the input file opened fine
    89                                      error:									;
    90 00000069 68[B7000000]                push	errorPrompt2					;Print the error message saying the file didn't open OK
    91 0000006E 6A2A                    	push	errorPrompt2.LENGTHOF			;
    92 00000070 E815020000                  call	outputDisplay					;
    93 00000075 E9D2010000                  jmp		exit1							;
    94                                      continue3:
    95                                      
    96                                      ;Create the output file
    97 0000007A B855000000                  mov		rax,	85						;call value to create the file
    98 0000007F 488B3C25[17010000]          mov		rdi,	QWORD[destFileAddress]	;Copy the pointer to the output file name to RDI
    99 00000087 BEB6010000                  mov		rsi,	666o					;File security flags; owner, group, and other have read/write priveleges
   100 0000008C 0F05                        syscall									;Poke the kernel
   101 0000008E 4883F800                    cmp		rax,	0						;Check to be sure the file was created OK
   102 00000092 7E0A                        jle		error2    						;If it's negative or zero, file creation failed
   103 00000094 48890425[1E020000]          mov		[destFileD],	rax				;Save the file descriptor
   104 0000009C EB11                        jmp		continue4						;Skip the error message if the output file was created successfully
   105                                      error2:									;
   106 0000009E 68[E1000000]                push	errorPrompt3					;Print the error message saying the file didn't create OK
   107 000000A3 6A2D                    	push	errorPrompt3.LENGTHOF			;
   108 000000A5 E8E0010000                  call	outputDisplay					;
   109 000000AA E99D010000                  jmp		exit1							;
   110                                      continue4:   
   111                                      
   112                                      ;Prompt the user to enter an encryption key
   113 000000AF 68[4B010000]                push	keyPrompt
   114 000000B4 6A30                        push	keyPrompt.LENGTHOF
   115 000000B6 E8CF010000                  call	outputDisplay
   116 000000BB 68[26020000]                push	encryptionKey
   117 000000C0 68FF000000                  push	encryptionKey.LENGTHOF
   118 000000C5 E89B010000                  call	inputKeyboard
   119 000000CA 48890425[25030000]          mov		[keyLength],	rax				;Store the length of the encryption/decryption key into keyLength
   120                                  
   121                                      ;Display to the user that the input file is being copied to the output file
   122 000000D2 68[0E010000]                push	copyPrompt
   123 000000D7 6A3D                        push	copyPrompt.LENGTHOF
   124 000000D9 E8AC010000                  call	outputDisplay
   125                                      
   126                                      ;Get the current address limit (bottom) of this program
   127 000000DE BF00000000                  mov		rdi,	0						;The argument that goes to sys_brk - get current
   128 000000E3 B80C000000                  mov		rax,	0ch						;The sys_brk function will be executed
   129 000000E8 0F05                        syscall									;Poke the kernel
   130 000000EA 48890425[2D030000]          mov		[origMemoryLimit],	rax			;Save our memory
   131                                      
   132                                      ;Allocate 0ffffh bytes of dynamic memory
   133 000000F2 48890425[3D030000]          mov		[currentTop],		rax			;Save our variable pointer
   134 000000FA 4805FFFF0000                add		rax,				0ffffh		;Allocating 0ffffh bytes, so add it to the orig
   135 00000100 48890425[35030000]          mov		[currentBottom],	rax			;Save the new bottom
   136 00000108 4889C7                      mov		rdi,				rax			;The new "bottom" of this program
   137 0000010B B80C000000                  mov		rax,				0ch			;sys_brk function
   138 00000110 0F05                        syscall									;Poke the kernel
   139                                      
   140                                      ;Read the input file, RAX will contain the number of bytes read
   141                                      ;mov		rcx,			0ffffh
   142                                      L3:
   143                                  		;Read the source file
   144 00000112 B800000000              		mov		rax,	0					;Call value for reading
   145 00000117 488B3C25[0F010000]      		mov		rdi,	[sourceFileD]		;Copy the source file descriptor into RDI
   146 0000011F 488B3425[3D030000]      		mov		rsi,	[currentTop]		;Copy the address of memory buffer into RSI
   147 00000127 BAFFFF0000              		mov		rdx,	0ffffh				;Move the size of the memory buffer into RDX
   148 0000012C 0F05                    		syscall								;Poke the kernel
   149 0000012E 48890425[45030000]      		mov		[bytesRead],	rax			;Save the number of bytes read
   150 00000136 48010425[4D030000]      		add		[totalBytesRead],	rax		;Add to the total of bytes read
   151                                  		;Call the EncryptMe function
   152 0000013E FF3425[3D030000]        		push	QWORD[currentTop]			;Push the top of the allocated memory
   153 00000145 68FFFF0000              		push	0ffffh						;Push the size of the allocated memory
   154 0000014A 68[26020000]            		push	encryptionKey				;Push the address of the encryption/decryption key
   155 0000014F FF3425[25030000]        		push	QWORD[keyLength]			;Push the size of the encryption/decryption key
   156 00000156 E856010000              		call	EncryptMe					;Call the function
   157                                  		;Write to the destination file
   158 0000015B B801000000              		mov		rax,	1					;Call value for writing
   159 00000160 488B3C25[1E020000]      		mov		rdi,	[destFileD]			;Copy destination file descriptor onto RDI
   160 00000168 488B3425[3D030000]      		mov		rsi,	[currentTop]		;Copy the current top of the allocated memory onto RSI
   161 00000170 488B1425[45030000]      		mov		rdx,	[bytesRead]			;Copy the amount of bytes read onto RDX which will be the amount of bytes to write
   162 00000178 0F05                    		syscall								;Poke the kernel
   163                                  		;See if we reached to the end of the file
   164 0000017A 488B0C25[45030000]      		mov		rcx,	[bytesRead]			;Compare the number of bytes read with 0ffffh
   165 00000182 BAFFFF0000              		mov		rdx,	0ffffh				;
   166 00000187 4839D1                  		cmp		rcx,	rdx					;If the number of bytes read is less than 0ffffh
   167 0000018A 722D                    		jb		continue5					;Then we made it to the end of the file, so jump out of the loop
   168                                  		;Allocate more memory if we haven't reached the end of the file
   169 0000018C 488B0425[35030000]      		mov		rax,	[currentBottom]		;Otherwise, extend the allocated memory by 0ffffh and continue the loop
   170 00000194 48890425[3D030000]      		mov		[currentTop],	rax			;
   171 0000019C 4805FFFF0000            		add		rax,	0ffffh				;
   172 000001A2 48890425[35030000]      		mov		[currentBottom],	rax		;
   173 000001AA 4889C7                  		mov		rdi,	rax					;
   174 000001AD B80C000000              		mov		rax,	0ch					;
   175 000001B2 0F05                    		syscall								;Poke the kernel
   176 000001B4 E959FFFFFF              	jmp	L3									;
   177                                  	continue5:
   178                                      
   179                                      ;Display the total bytes written
   180 000001B9 68[7E010000]                push	bytesPrompt
   181 000001BE 6A18                        push	bytesPrompt.LENGTHOF
   182 000001C0 E8C5000000                  call 	outputDisplay
   183 000001C5 FF3425[4D030000]            push	QWORD[totalBytesRead]
   184 000001CC E8(00000000)                call	Print64bitNumDecimal
   185 000001D1 68[7B010000]                push	nextline
   186 000001D6 6A03                        push	nextline.LENGTHOF
   187 000001D8 E8AD000000                  call	outputDisplay
   188 000001DD 68[7B010000]                push	nextline
   189 000001E2 6A03                        push	nextline.LENGTHOF
   190 000001E4 E8A1000000                  call	outputDisplay
   191                                      
   192                                      ;Close the input file
   193 000001E9 B803000000                  mov		rax,	3h						;call value to close the file
   194 000001EE 488B3C25[0F010000]          mov		rdi,	[sourceFileD]			;Copy the file descriptor into RDI
   195 000001F6 0F05                        syscall									;Poke the kernel
   196                                      
   197                                      ;Close the output file
   198 000001F8 B803000000                  mov		rax,	3h						;call value to close the file
   199 000001FD 488B3C25[1E020000]          mov		rdi,	[destFileD]				;Copy the file descriptor into RDI
   200 00000205 0F05                        syscall									;Poke the kernel
   201                                      
   202                                      ;Deallocate memory
   203 00000207 488B0C25[35030000]          mov		rcx,	[currentBottom]
   204 0000020F 482B0C25[2D030000]          sub		rcx,	[origMemoryLimit]
   205 00000217 488B3425[2D030000]          mov		rsi,	[origMemoryLimit]
   206                                      L5:
   207 0000021F C60600                  		mov		BYTE[rsi],	0h
   208 00000222 4883C601                		add		rsi,	1
   209 00000226 E2F7                    	loop	L5
   210 00000228 488B3C25[2D030000]      	mov		rdi,	[origMemoryLimit]
   211 00000230 B80C000000              	mov		rax,	0ch						;sys_brk function
   212 00000235 0F05                    	syscall									;Poke the kernel
   213 00000237 B800000000              	mov		rax,	0h
   214 0000023C 48890425[3D030000]      	mov		[currentTop],		rax			;Clear out pointers
   215 00000244 48890425[35030000]      	mov		[currentBottom],	rax			;
   216                                  	
   217                                  	;Exit the program
   218                                  	exit1:
   219 0000024C 68[18000000]                push	closePrompt			;The prompt address - argument #1
   220 00000251 6A22                        push	closePrompt.LENGTHOF
   221 00000253 E832000000                  call  	outputDisplay
   222                                      
   223 00000258 90                          nop
   224                                  ;
   225                                  ;Setup the registers for exit and poke the kernel
   226                                  ;Exit: 
   227                                  Exit:
   228 00000259 B83C000000              	mov		rax, 60					;60 = system exit
   229 0000025E BF00000000              	mov		rdi, 0					;0 = return code
   230 00000263 0F05                    	syscall							;Poke the kernel
   231                                  
   232                                  ;inputKeyboard:	Get keyboard input from the user
   233                                  ;arguments:		First argument 	[rbp+24] (buffer)
   234                                  ;				Second argument	[rbp+16] (buffer length)
   235                                  ;Note: RAX register will contain the length of the data input by the user
   236                                  ;Example:
   237                                  ;   push	lpBuffer
   238                                  ;   push	lpBuffer.LENGTHOF
   239                                  ;	call	inputKeyboard
   240                                  inputKeyboard:
   241 00000265 55                      	push	rbp							;Establish our stack frame
   242 00000266 4889E5                  	mov		rbp,	rsp					;
   243                                  	
   244 00000269 56                      	push	rsi							;Save RSI, RDX, and RDI
   245 0000026A 52                      	push	rdx							;
   246 0000026B 57                      	push	rdi							;
   247                                  	
   248 0000026C 488B7518                	mov		rsi,	QWORD[rbp+24]		;Copy input buffer address into RSI
   249 00000270 488B5510                	mov		rdx,	QWORD[rbp+16]		;Copy length of the input buffer into RDX
   250 00000274 B800000000              	mov		rax,	0h					;Read
   251 00000279 BF00000000              	mov		rdi,	0h					;From stdin
   252 0000027E 0F05                    	syscall								;Poke the kernel
   253                                  	
   254 00000280 5F                      	pop		rdi							;Restore RSI, RDX, and RDI
   255 00000281 5A                      	pop		rdx							;
   256 00000282 5E                      	pop		rsi							;
   257                                  	
   258 00000283 4889EC                  	mov		rsp,	rbp					;Destroys our stack frame
   259 00000286 5D                      	pop		rbp							;
   260                                  
   261 00000287 C21000                  ret 16
   262                                  
   263                                  ;outputDisplay:	Output to the display
   264                                  ;arguments:		First argument 	[rbp+24] (string array address)
   265                                  ;				Second argument	[rbp+16] (length of the array)
   266                                  ;Example:
   267                                  ;	push	prompt
   268                                  ;	push	prompt.LENGTHOF
   269                                  ;	call	outputDisplay
   270                                  outputDisplay:
   271 0000028A 55                      	push	rbp				;Establish our stack frame
   272 0000028B 4889E5                  	mov		rbp,	rsp		;
   273                                  	
   274 0000028E 56                      	push	rsi							;Save RSI, RDX, RAX, and RDI
   275 0000028F 52                      	push	rdx							;
   276 00000290 50                      	push	rax							;
   277 00000291 57                      	push	rdi							;
   278                                  	
   279 00000292 488B7518                	mov		rsi,	QWORD[rbp+24]		;Copy the address of the prompt to RSI
   280 00000296 488B5510                	mov		rdx,	QWORD[rbp+16]		;Copy the length of the prompt into RDX
   281 0000029A B801000000              	mov		rax,	01h					;Move the write "code" into RAX
   282 0000029F BF01000000              	mov		rdi,	01h					;Move the "code" for stdout into RDI
   283 000002A4 0F05                    	syscall								;Poke the kernel
   284                                  	
   285 000002A6 5F                      	pop		rdi							;Restore RSI, RDX, RAX, and RDI
   286 000002A7 58                      	pop		rax							;
   287 000002A8 5A                      	pop		rdx							;
   288 000002A9 5E                      	pop		rsi							;	
   289                                  	
   290 000002AA 4889EC                  	mov		rsp,	rbp		;Destroys our stack frame
   291 000002AD 5D                      	pop		rbp				;
   292                                  
   293 000002AE C21000                  ret 16
   294                                  
   295                                  ;EncryptMe: Encrypt the file-read data from the allocated memory with an encryption key
   296                                  ;arguments:		First argument	[rbp+40]	(the address of the allocated memory)
   297                                  ;				Second argument	[rbp+32]	(the length of the allocated memory)
   298                                  ;				Third argument	[rbp+24]	(the address to the encryption/decryption key)
   299                                  ;				Fourth argument	[rbp+16]	(the length of the encryption/decryption key)
   300                                  ;Example:
   301                                  ;	push	[currentTop]
   302                                  ;	push	0ffffh
   303                                  ;	push	[encryptionKey]
   304                                  ;	push	[keyLength]
   305                                  ;	call	EncryptMe
   306                                  EncryptMe:
   307 000002B1 55                      	push	rbp				;Establish our stack frame
   308 000002B2 4889E5                  	mov		rbp,	rsp		;
   309                                  	
   310 000002B5 50                      	push	rax				;Save all of our registers
   311 000002B6 53                      	push	rbx				;
   312 000002B7 51                      	push	rcx				;
   313 000002B8 52                      	push	rdx				;
   314 000002B9 56                      	push	rsi				;
   315 000002BA 57                      	push	rdi				;
   316                                  	
   317 000002BB B801000000              	mov		rax,	1					;Counter for when the loop reaches to the end of the key array
   318 000002C0 488B7528                	mov		rsi,	QWORD[rbp+40]		;Copy the address of the current top the allocated memory onto RSI
   319 000002C4 488B4D20                	mov		rcx,	QWORD[rbp+32]		;Set the counter equal to the length of the allocated memory
   320 000002C8 488B7D18                	mov		rdi,	QWORD[rbp+24]		;Copy the address of the encryption/decryption key onto RDI
   321 000002CC 488B5510                	mov		rdx,	QWORD[rbp+16]		;copy the length of the encryption/decryption key onto rdx	
   322                                  	L4:									;
   323 000002D0 8A1F                    		mov		bl,		[rdi]			;Copy the current character onto BL
   324 000002D2 301E                    		xor		[rsi],	bl				;Encrypting character in RSI using character in RDI
   325 000002D4 4839D0                  		cmp		rax,	rdx				;See if we reached the end of the key array
   326 000002D7 750B                    		jne		continue6				;If it hasn't, jump to where the counter and key array can be incremented
   327 000002D9 488B7D18                		mov		rdi,	QWORD[rbp+24]	;Otherwise reset the key array if it did
   328 000002DD B801000000              		mov		rax,	1				;
   329 000002E2 EB08                    		jmp		continue7				;
   330                                  		continue6:						;
   331 000002E4 4883C001                		add		rax,	1				;Incrementing encryption/decryption key array counter
   332 000002E8 4883C701                		add		rdi,	1				;Incrementing encryption/decryption key array
   333                                  		continue7:						;
   334 000002EC 4883C601                		add		rsi,	1				;Incrementing dynamic memory position
   335 000002F0 E2DE                    	loop	L4							;
   336                                  	
   337 000002F2 5F                      	pop		rdi				;Restore all of our registers
   338 000002F3 5E                      	pop		rsi				;
   339 000002F4 5A                      	pop		rdx				;
   340 000002F5 59                      	pop		rcx				;
   341 000002F6 5B                      	pop		rbx				;
   342 000002F7 58                      	pop		rax				;
   343                                  	
   344 000002F8 4889EC                  	mov		rsp,	rbp		;Destroys our stack frame
   345 000002FB 5D                      	pop		rbp				;
   346                                  	
   347 000002FC C22000                  ret 32
